{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ImageManager } from \"@/Class/ImageManager\";\nexport default class Lazy {\n  constructor() {\n    this.managerQueue = [];\n    this.initIntersectionObserver();\n  }\n  add(el, binding) {\n    const src = binding.value;\n    const imageManager = new ImageManager({\n      el,\n      src\n    });\n    this.managerQueue.push(imageManager);\n    this.observer.observe(el);\n  }\n  initIntersectionObserver() {\n    this.observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const manager = this.managerQueue.find(manager => {\n            return manager.el === entry.target;\n          });\n          if (manager) {\n            if (manager.state === 1) {\n              this.removeManager(manager);\n              return;\n            }\n            manager.renderSrc(manager.src);\n          }\n        }\n      });\n    });\n  }\n  removeManager(manager) {\n    const index = this.managerQueue.indexOf(manager);\n    if (index > -1) {\n      this.managerQueue.splice(index, 1);\n    }\n    if (this.observer) {\n      this.observer.unobserve(manager.el);\n    }\n  }\n}","map":{"version":3,"names":["ImageManager","Lazy","constructor","managerQueue","initIntersectionObserver","add","el","binding","src","value","imageManager","push","observer","observe","IntersectionObserver","entries","forEach","entry","isIntersecting","manager","find","target","state","removeManager","renderSrc","index","indexOf","splice","unobserve"],"sources":["D:/lin_hai_bo_ke/qian_duan_2/src/Class/Lazy.js"],"sourcesContent":["import {ImageManager} from \"@/Class/ImageManager\";\r\nexport default class Lazy {\r\n    constructor() {\r\n        this.managerQueue = []\r\n        this.initIntersectionObserver()\r\n    }\r\n    add(el,binding) {\r\n        const src = binding.value\r\n        const imageManager = new ImageManager({el, src})\r\n        this.managerQueue.push(imageManager)\r\n        this.observer.observe(el)\r\n    }\r\n    initIntersectionObserver() {\r\n        this.observer = new IntersectionObserver((entries) => {\r\n            entries.forEach((entry) => {\r\n                if (entry.isIntersecting) {\r\n                    const manager = this.managerQueue.find((manager)=>{return manager.el === entry.target})\r\n                    if (manager){\r\n                        if (manager.state === 1) {this.removeManager(manager);return}\r\n                        manager.renderSrc(manager.src)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n    removeManager(manager) {\r\n        const index = this.managerQueue.indexOf(manager)\r\n        if (index > -1) {this.managerQueue.splice(index, 1)}\r\n        if (this.observer) {this.observer.unobserve(manager.el)}\r\n    }\r\n}\r\n\r\n"],"mappings":";AAAA,SAAQA,YAAY,QAAO,sBAAsB;AACjD,eAAe,MAAMC,IAAI,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,wBAAwB,CAAC,CAAC;EACnC;EACAC,GAAGA,CAACC,EAAE,EAACC,OAAO,EAAE;IACZ,MAAMC,GAAG,GAAGD,OAAO,CAACE,KAAK;IACzB,MAAMC,YAAY,GAAG,IAAIV,YAAY,CAAC;MAACM,EAAE;MAAEE;IAAG,CAAC,CAAC;IAChD,IAAI,CAACL,YAAY,CAACQ,IAAI,CAACD,YAAY,CAAC;IACpC,IAAI,CAACE,QAAQ,CAACC,OAAO,CAACP,EAAE,CAAC;EAC7B;EACAF,wBAAwBA,CAAA,EAAG;IACvB,IAAI,CAACQ,QAAQ,GAAG,IAAIE,oBAAoB,CAAEC,OAAO,IAAK;MAClDA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACvB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACtB,MAAMC,OAAO,GAAG,IAAI,CAAChB,YAAY,CAACiB,IAAI,CAAED,OAAO,IAAG;YAAC,OAAOA,OAAO,CAACb,EAAE,KAAKW,KAAK,CAACI,MAAM;UAAA,CAAC,CAAC;UACvF,IAAIF,OAAO,EAAC;YACR,IAAIA,OAAO,CAACG,KAAK,KAAK,CAAC,EAAE;cAAC,IAAI,CAACC,aAAa,CAACJ,OAAO,CAAC;cAAC;YAAM;YAC5DA,OAAO,CAACK,SAAS,CAACL,OAAO,CAACX,GAAG,CAAC;UAClC;QACJ;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACAe,aAAaA,CAACJ,OAAO,EAAE;IACnB,MAAMM,KAAK,GAAG,IAAI,CAACtB,YAAY,CAACuB,OAAO,CAACP,OAAO,CAAC;IAChD,IAAIM,KAAK,GAAG,CAAC,CAAC,EAAE;MAAC,IAAI,CAACtB,YAAY,CAACwB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAAA;IACnD,IAAI,IAAI,CAACb,QAAQ,EAAE;MAAC,IAAI,CAACA,QAAQ,CAACgB,SAAS,CAACT,OAAO,CAACb,EAAE,CAAC;IAAA;EAC3D;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}