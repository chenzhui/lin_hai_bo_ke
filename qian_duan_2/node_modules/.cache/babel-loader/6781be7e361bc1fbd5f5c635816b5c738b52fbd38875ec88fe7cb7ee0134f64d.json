{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { NodeUpdateType } from './constants.js';\nimport { getNodesKeys, getCacheKey } from './NodeUtils.js';\nimport { MathUtils } from 'three';\nlet _nodeId = 0;\nclass Node {\n  constructor(nodeType = null) {\n    this.isNode = true;\n    this.nodeType = nodeType;\n    this.updateType = NodeUpdateType.NONE;\n    this.uuid = MathUtils.generateUUID();\n    Object.defineProperty(this, 'id', {\n      value: _nodeId++\n    });\n  }\n  get type() {\n    return this.constructor.name;\n  }\n  isGlobal( /*builder*/\n  ) {\n    return false;\n  }\n  getChildren() {\n    const children = [];\n    for (const property in this) {\n      const object = this[property];\n      if (Array.isArray(object) === true) {\n        for (const child of object) {\n          if (child?.isNode === true) {\n            children.push(child);\n          }\n        }\n      } else if (object?.isNode === true) {\n        children.push(object);\n      } else if (typeof object === 'object') {\n        for (const property in object) {\n          const child = object[property];\n          if (child?.isNode === true) {\n            children.push(child);\n          }\n        }\n      }\n    }\n    return children;\n  }\n  getCacheKey() {\n    return getCacheKey(this);\n  }\n  getHash( /*builder*/\n  ) {\n    return this.uuid;\n  }\n  getUpdateType( /*builder*/\n  ) {\n    return this.updateType;\n  }\n  getNodeType( /*builder*/\n  ) {\n    return this.nodeType;\n  }\n  getReference(builder) {\n    const hash = this.getHash(builder);\n    const nodeFromHash = builder.getNodeFromHash(hash);\n    return nodeFromHash || this;\n  }\n  construct(builder) {\n    const nodeProperties = builder.getNodeProperties(this);\n    for (const childNode of this.getChildren()) {\n      nodeProperties['_node' + childNode.id] = childNode;\n    }\n\n    // return a outputNode if exists\n    return null;\n  }\n  analyze(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    nodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n    if (nodeData.dependenciesCount === 1) {\n      // node flow children\n\n      const nodeProperties = builder.getNodeProperties(this);\n      for (const childNode of Object.values(nodeProperties)) {\n        if (childNode?.isNode === true) {\n          childNode.build(builder);\n        }\n      }\n    }\n  }\n  generate(builder, output) {\n    const {\n      outputNode\n    } = builder.getNodeProperties(this);\n    if (outputNode?.isNode === true) {\n      return outputNode.build(builder, output);\n    }\n  }\n  update( /*frame*/\n  ) {\n    console.warn('Abstract function.');\n  }\n  build(builder, output = null) {\n    const refNode = this.getReference(builder);\n    if (this !== refNode) {\n      return refNode.build(builder, output);\n    }\n    builder.addNode(this);\n    builder.addStack(this);\n\n    /* expected return:\n    \t- \"construct\"\t-> Node\n    \t- \"analyze\"\t\t-> null\n    \t- \"generate\"\t-> String\n    */\n    let result = null;\n    const buildStage = builder.getBuildStage();\n    if (buildStage === 'construct') {\n      const properties = builder.getNodeProperties(this);\n      if (properties.initialized !== true || builder.context.tempRead === false) {\n        properties.initialized = true;\n        properties.outputNode = this.construct(builder);\n        for (const childNode of Object.values(properties)) {\n          if (childNode?.isNode === true) {\n            childNode.build(builder);\n          }\n        }\n      }\n    } else if (buildStage === 'analyze') {\n      this.analyze(builder);\n    } else if (buildStage === 'generate') {\n      const isGenerateOnce = this.generate.length === 1;\n      if (isGenerateOnce) {\n        const type = this.getNodeType(builder);\n        const nodeData = builder.getDataFromNode(this);\n        result = nodeData.snippet;\n        if (result === undefined /*|| builder.context.tempRead === false*/) {\n          result = this.generate(builder) || '';\n          nodeData.snippet = result;\n        }\n        result = builder.format(result, type, output);\n      } else {\n        result = this.generate(builder, output) || '';\n      }\n    }\n    builder.removeStack(this);\n    return result;\n  }\n  serialize(json) {\n    const nodeKeys = getNodesKeys(this);\n    if (nodeKeys.length > 0) {\n      const inputNodes = {};\n      for (const property of nodeKeys) {\n        inputNodes[property] = this[property].toJSON(json.meta).uuid;\n      }\n      json.inputNodes = inputNodes;\n    }\n  }\n  deserialize(json) {\n    if (json.inputNodes !== undefined) {\n      const nodes = json.meta.nodes;\n      for (const property in json.inputNodes) {\n        const uuid = json.inputNodes[property];\n        this[property] = nodes[uuid];\n      }\n    }\n  }\n  toJSON(meta) {\n    const {\n      uuid,\n      type\n    } = this;\n    const isRoot = meta === undefined || typeof meta === 'string';\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n\n    // serialize\n\n    let data = meta.nodes[uuid];\n    if (data === undefined) {\n      data = {\n        uuid,\n        type,\n        meta,\n        metadata: {\n          version: 4.5,\n          type: 'Node',\n          generator: 'Node.toJSON'\n        }\n      };\n      meta.nodes[data.uuid] = data;\n      this.serialize(data);\n      delete data.meta;\n    }\n\n    // TODO: Copied from Object3D.toJSON\n\n    function extractFromCache(cache) {\n      const values = [];\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n      return values;\n    }\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n    return data;\n  }\n}\nexport default Node;","map":{"version":3,"names":["NodeUpdateType","getNodesKeys","getCacheKey","MathUtils","_nodeId","Node","constructor","nodeType","isNode","updateType","NONE","uuid","generateUUID","Object","defineProperty","value","type","name","isGlobal","getChildren","children","property","object","Array","isArray","child","push","getHash","getUpdateType","getNodeType","getReference","builder","hash","nodeFromHash","getNodeFromHash","construct","nodeProperties","getNodeProperties","childNode","id","analyze","nodeData","getDataFromNode","dependenciesCount","undefined","values","build","generate","output","outputNode","update","console","warn","refNode","addNode","addStack","result","buildStage","getBuildStage","properties","initialized","context","tempRead","isGenerateOnce","length","snippet","format","removeStack","serialize","json","nodeKeys","inputNodes","toJSON","meta","deserialize","nodes","isRoot","textures","images","data","metadata","version","generator","extractFromCache","cache","key"],"sources":["D:/lin_hai_bo_ke/qian_duan_2/node_modules/three/examples/jsm/nodes/core/Node.js"],"sourcesContent":["import { NodeUpdateType } from './constants.js';\nimport { getNodesKeys, getCacheKey } from './NodeUtils.js';\nimport { MathUtils } from 'three';\n\nlet _nodeId = 0;\n\nclass Node {\n\n\tconstructor( nodeType = null ) {\n\n\t\tthis.isNode = true;\n\n\t\tthis.nodeType = nodeType;\n\n\t\tthis.updateType = NodeUpdateType.NONE;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\n\n\t}\n\n\tget type() {\n\n\t\treturn this.constructor.name;\n\n\t}\n\n\tisGlobal( /*builder*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\tgetChildren() {\n\n\t\tconst children = [];\n\n\t\tfor ( const property in this ) {\n\n\t\t\tconst object = this[ property ];\n\n\t\t\tif ( Array.isArray( object ) === true ) {\n\n\t\t\t\tfor ( const child of object ) {\n\n\t\t\t\t\tif ( child?.isNode === true ) {\n\n\t\t\t\t\t\tchildren.push( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object?.isNode === true ) {\n\n\t\t\t\tchildren.push( object );\n\n\t\t\t} else if ( typeof object === 'object' ) {\n\n\t\t\t\tfor ( const property in object ) {\n\n\t\t\t\t\tconst child = object[ property ];\n\n\t\t\t\t\tif ( child?.isNode === true ) {\n\n\t\t\t\t\t\tchildren.push( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn children;\n\n\t}\n\n\tgetCacheKey() {\n\n\t\treturn getCacheKey( this );\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn this.uuid;\n\n\t}\n\n\tgetUpdateType( /*builder*/ ) {\n\n\t\treturn this.updateType;\n\n\t}\n\n\tgetNodeType( /*builder*/ ) {\n\n\t\treturn this.nodeType;\n\n\t}\n\n\tgetReference( builder ) {\n\n\t\tconst hash = this.getHash( builder );\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\n\n\t\treturn nodeFromHash || this;\n\n\t}\n\n\tconstruct( builder ) {\n\n\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\tfor ( const childNode of this.getChildren() ) {\n\n\t\t\tnodeProperties[ '_node' + childNode.id ] = childNode;\n\n\t\t}\n\n\t\t// return a outputNode if exists\n\t\treturn null;\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\t\tnodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n\n\t\tif ( nodeData.dependenciesCount === 1 ) {\n\n\t\t\t// node flow children\n\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\n\n\t\t\t\tif ( childNode?.isNode === true ) {\n\n\t\t\t\t\tchildNode.build( builder );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { outputNode } = builder.getNodeProperties( this );\n\n\t\tif ( outputNode?.isNode === true ) {\n\n\t\t\treturn outputNode.build( builder, output );\n\n\t\t}\n\n\t}\n\n\tupdate( /*frame*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tbuild( builder, output = null ) {\n\n\t\tconst refNode = this.getReference( builder );\n\n\t\tif ( this !== refNode ) {\n\n\t\t\treturn refNode.build( builder, output );\n\n\t\t}\n\n\t\tbuilder.addNode( this );\n\t\tbuilder.addStack( this );\n\n\t\t/* expected return:\n\t\t\t- \"construct\"\t-> Node\n\t\t\t- \"analyze\"\t\t-> null\n\t\t\t- \"generate\"\t-> String\n\t\t*/\n\t\tlet result = null;\n\n\t\tconst buildStage = builder.getBuildStage();\n\n\t\tif ( buildStage === 'construct' ) {\n\n\t\t\tconst properties = builder.getNodeProperties( this );\n\n\t\t\tif ( properties.initialized !== true || builder.context.tempRead === false ) {\n\n\t\t\t\tproperties.initialized = true;\n\t\t\t\tproperties.outputNode = this.construct( builder );\n\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\n\n\t\t\t\t\tif ( childNode?.isNode === true ) {\n\n\t\t\t\t\t\tchildNode.build( builder );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( buildStage === 'analyze' ) {\n\n\t\t\tthis.analyze( builder );\n\n\t\t} else if ( buildStage === 'generate' ) {\n\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\n\n\t\t\tif ( isGenerateOnce ) {\n\n\t\t\t\tconst type = this.getNodeType( builder );\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\t\tresult = nodeData.snippet;\n\n\t\t\t\tif ( result === undefined /*|| builder.context.tempRead === false*/ ) {\n\n\t\t\t\t\tresult = this.generate( builder ) || '';\n\n\t\t\t\t\tnodeData.snippet = result;\n\n\t\t\t\t}\n\n\t\t\t\tresult = builder.format( result, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tresult = this.generate( builder, output ) || '';\n\n\t\t\t}\n\n\t\t}\n\n\t\tbuilder.removeStack( this );\n\n\t\treturn result;\n\n\t}\n\n\tserialize( json ) {\n\n\t\tconst nodeKeys = getNodesKeys( this );\n\n\t\tif ( nodeKeys.length > 0 ) {\n\n\t\t\tconst inputNodes = {};\n\n\t\t\tfor ( const property of nodeKeys ) {\n\n\t\t\t\tinputNodes[ property ] = this[ property ].toJSON( json.meta ).uuid;\n\n\t\t\t}\n\n\t\t\tjson.inputNodes = inputNodes;\n\n\t\t}\n\n\t}\n\n\tdeserialize( json ) {\n\n\t\tif ( json.inputNodes !== undefined ) {\n\n\t\t\tconst nodes = json.meta.nodes;\n\n\t\t\tfor ( const property in json.inputNodes ) {\n\n\t\t\t\tconst uuid = json.inputNodes[ property ];\n\n\t\t\t\tthis[ property ] = nodes[ uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst { uuid, type } = this;\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t}\n\n\t\t// serialize\n\n\t\tlet data = meta.nodes[ uuid ];\n\n\t\tif ( data === undefined ) {\n\n\t\t\tdata = {\n\t\t\t\tuuid,\n\t\t\t\ttype,\n\t\t\t\tmeta,\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Node',\n\t\t\t\t\tgenerator: 'Node.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tmeta.nodes[ data.uuid ] = data;\n\n\t\t\tthis.serialize( data );\n\n\t\t\tdelete data.meta;\n\n\t\t}\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport default Node;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}