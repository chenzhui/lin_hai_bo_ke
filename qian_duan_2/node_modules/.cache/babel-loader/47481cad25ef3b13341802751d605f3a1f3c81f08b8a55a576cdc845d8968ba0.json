{"ast":null,"code":"require(\"core-js/modules/es.array.with.js\");\n/*!\n * stats - parser\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar parse = require('./uglify/parser').parse,\n  sys = require('util');\n\n/**\n * Return stats for the given javascript `str`.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Object}\n * @api public\n */\n\nmodule.exports = function (str, options) {\n  var options = options || {},\n    stats = {\n      loc: str.split('\\n').length,\n      bytes: Buffer.byteLength(str),\n      statements: 0,\n      assignments: 0,\n      functions: 0,\n      stringBytes: 0,\n      arrayLiterals: 0,\n      objectLiterals: 0,\n      objectsCreated: 0,\n      regexpLiterals: 0,\n      strings: 0,\n      numbers: 0,\n      throws: 0\n    };\n\n  // strip shebang\n  if ('#' == str[0]) str = str.slice(str.indexOf('\\n'));\n  function visit(node) {\n    if (!node) return;\n    var name = node[0];\n\n    // array support\n    if ('string' != typeof name) {\n      for (var i = 0, len = node.length; i < len; ++i) {\n        visit(node[i]);\n      }\n      return;\n    }\n\n    // rename \"name\" to \"ident\"\n    if ('name' == name) name = 'ident';\n\n    // visit the node\n    if (!visit[name]) throw new Error('no visitor implemented for \"' + name + '\"');\n    visit[name](node);\n  }\n  visit['toplevel'] = function (node) {\n    visit(node[1]);\n  };\n  visit['seq'] = function (node) {\n    visit(node[1]);\n    visit(node[2]);\n  };\n  visit['for-in'] = function (node) {\n    visit(node[1]);\n    visit(node[2]);\n    visit(node[3]);\n    visit(node[4]);\n  };\n  visit['switch'] = function (node) {\n    ++stats.statements;\n    visit(node[1]);\n    node[2].forEach(function (node) {\n      visit(node[1]);\n      visit(node[2]);\n    });\n  };\n  visit['with'] = function (node) {\n    ++stats.statements;\n    visit(node[1]);\n    visit(node[2]);\n  };\n  visit['try'] = function (node) {\n    ++stats.statements;\n    visit(node[1]);\n    node[2] && visit(node[2][1]);\n  };\n  visit['conditional'] = function (node) {\n    visit(node[1]);\n    visit(node[2]);\n    visit(node[3]);\n  };\n  visit['break'] = function (node) {\n    ++stats.statements;\n  };\n  visit['array'] = function (node) {\n    ++stats.arrayLiterals;\n    visit(node[1]);\n  };\n  visit['object'] = function (node) {\n    ++stats.objectLiterals;\n    node[1].forEach(function (pair) {\n      visit(pair[1]);\n    });\n  };\n  visit['var'] = visit['const'] = function (node) {\n    node[1].forEach(function (node) {\n      if (node[1]) ++stats.assignments;\n      visit(node[1]);\n    });\n    ++stats.statements;\n  };\n  visit['regexp'] = function (node) {\n    ++stats.regexpLiterals;\n  };\n  visit['num'] = function (node) {\n    ++stats.numbers;\n  };\n  visit['do'] = function (node) {\n    ++stats.statements;\n    visit(node[1]);\n    visit(node[2]);\n  };\n  visit['label'] = function (node) {\n    visit(node[2]);\n  };\n  visit['atom'] = function (node) {};\n  visit['unary-prefix'] = function (node) {};\n  visit['unary-postfix'] = function (node) {};\n  visit['continue'] = function (node) {};\n  visit['return'] = function (node) {};\n  visit['binary'] = function (node) {};\n  visit['ident'] = function (node) {};\n  visit['new'] = function (node) {\n    ++stats.objectsCreated;\n    visit(node[1]);\n    visit(node[2]);\n  };\n  visit['throw'] = function (node) {\n    ++stats.throws;\n    visit(node[1]);\n  };\n  visit['for'] = function (node) {\n    visit(node[1]);\n    visit(node[2]);\n    visit(node[3]);\n    visit(node[4]);\n  };\n  visit['sub'] = function (node) {\n    visit(node[1]);\n    visit(node[2]);\n  };\n  visit['string'] = function (node) {\n    ++stats.strings;\n    stats.stringBytes += Buffer.byteLength(node[1]);\n  };\n  visit['dot'] = function (node) {\n    visit(node[1]);\n  };\n  visit['block'] = function (node) {\n    visit(node[1]);\n  };\n  visit['while'] = function (node) {\n    ++stats.statements;\n    visit(node[2]);\n  };\n  visit['if'] = function (node) {\n    ++stats.statements;\n    visit(node[1]);\n    visit(node[2]);\n    visit(node[3]);\n  };\n  visit['defun'] = function (node) {\n    ++stats.functions;\n    ++stats.statements;\n    visit(node[3]);\n  };\n  visit['function'] = function (node) {\n    ++stats.functions;\n    visit(node[3]);\n  };\n  visit['call'] = function (node) {\n    visit(node[1]);\n    visit(node[2]);\n  };\n  visit['assign'] = function (node) {\n    ++stats.assignments;\n    visit(node[3]);\n  };\n  visit['stat'] = function (node) {\n    ++stats.statements;\n    visit(node[1]);\n  };\n  try {\n    visit(parse(str));\n  } catch (err) {\n    if ('JS_Parse_Error' != err.constructor.name) throw err;\n    var line = str.split('\\n')[err.line];\n    err = new SyntaxError(err.message + ' on line ' + err.line + ':' + err.col + ':\\n    ' + sys.inspect(line));\n    if (!options.ignoreParseErrors) throw err;\n  }\n  return stats;\n};","map":{"version":3,"names":["parse","require","sys","module","exports","str","options","stats","loc","split","length","bytes","Buffer","byteLength","statements","assignments","functions","stringBytes","arrayLiterals","objectLiterals","objectsCreated","regexpLiterals","strings","numbers","throws","slice","indexOf","visit","node","name","i","len","Error","forEach","pair","err","constructor","line","SyntaxError","message","col","inspect","ignoreParseErrors"],"sources":["D:/lin_hai_bo_ke/qian_duan_2/node_modules/stats/lib/parser.js"],"sourcesContent":["\n/*!\n * stats - parser\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar parse = require('./uglify/parser').parse\n  , sys = require('util');\n\n/**\n * Return stats for the given javascript `str`.\n *\n * @param {String} str\n * @param {Object} options\n * @return {Object}\n * @api public\n */\n\nmodule.exports = function(str, options){\n  var options = options || {}\n    , stats = {\n      loc: str.split('\\n').length\n    , bytes: Buffer.byteLength(str)\n    , statements: 0\n    , assignments: 0\n    , functions: 0\n    , stringBytes: 0\n    , arrayLiterals: 0\n    , objectLiterals: 0\n    , objectsCreated: 0\n    , regexpLiterals: 0\n    , strings: 0\n    , numbers: 0\n    , throws: 0\n  };\n\n  // strip shebang\n  if ('#' == str[0]) str = str.slice(str.indexOf('\\n'));\n\n  function visit(node) {\n    if (!node) return;\n    var name = node[0];\n\n    // array support\n    if ('string' != typeof name) {\n      for (var i = 0, len = node.length; i < len; ++i) {\n        visit(node[i]);\n      }\n      return;\n    }\n\n    // rename \"name\" to \"ident\"\n    if ('name' == name) name = 'ident';\n\n    // visit the node\n    if (!visit[name]) throw new Error('no visitor implemented for \"' + name + '\"');\n    visit[name](node);\n  }\n\n  visit['toplevel'] = function(node){\n    visit(node[1]);\n  };\n\n  visit['seq'] = function(node){\n    visit(node[1]);\n    visit(node[2]);\n  };\n\n  visit['for-in'] = function(node){\n    visit(node[1]);\n    visit(node[2]);\n    visit(node[3]);\n    visit(node[4]);\n  };\n\n  visit['switch'] = function(node){\n    ++stats.statements;\n    visit(node[1]);\n    node[2].forEach(function(node){\n      visit(node[1]);\n      visit(node[2]);\n    });\n  };\n\n  visit['with'] = function(node){\n    ++stats.statements;\n    visit(node[1]);\n    visit(node[2]);\n  };\n\n  visit['try'] = function(node){\n    ++stats.statements;\n    visit(node[1]);\n    node[2] && visit(node[2][1]);\n  };\n\n  visit['conditional'] = function(node){\n    visit(node[1]);\n    visit(node[2]);\n    visit(node[3]);\n  };\n\n  visit['break'] = function(node){\n    ++stats.statements;\n  };\n\n  visit['array'] = function(node){\n    ++stats.arrayLiterals;\n    visit(node[1]);\n  };\n\n  visit['object'] = function(node){\n    ++stats.objectLiterals;\n    node[1].forEach(function(pair){\n      visit(pair[1]);\n    });\n  };\n\n  visit['var'] = \n  visit['const'] = function(node){\n    node[1].forEach(function(node){\n      if (node[1]) ++stats.assignments;\n      visit(node[1]);\n    });\n    ++stats.statements;\n  };\n\n  visit['regexp'] = function(node){\n    ++stats.regexpLiterals;\n  };\n\n  visit['num'] = function(node){\n    ++stats.numbers;\n  };\n\n  visit['do'] = function(node){\n    ++stats.statements;\n    visit(node[1]);\n    visit(node[2]);\n  };\n\n  visit['label'] = function(node){\n    visit(node[2]);\n  };\n\n  visit['atom'] = function(node){};\n\n  visit['unary-prefix'] = function(node){};\n  \n  visit['unary-postfix'] = function(node){};\n\n  visit['continue'] = function(node){};\n\n  visit['return'] = function(node){};\n\n  visit['binary'] = function(node){};\n\n  visit['ident'] = function(node){};\n\n  visit['new'] = function(node){\n    ++stats.objectsCreated;\n    visit(node[1]);\n    visit(node[2]);\n  };\n\n  visit['throw'] = function(node){\n    ++stats.throws;\n    visit(node[1]);\n  };\n\n  visit['for'] = function(node){\n    visit(node[1]);\n    visit(node[2]);\n    visit(node[3]);\n    visit(node[4]);\n  };\n\n  visit['sub'] = function(node){\n    visit(node[1]);\n    visit(node[2]);\n  };\n\n  visit['string'] = function(node){\n    ++stats.strings;\n    stats.stringBytes += Buffer.byteLength(node[1]);\n  };\n\n  visit['dot'] = function(node){\n    visit(node[1]);\n  };\n\n  visit['block'] = function(node){\n    visit(node[1]);\n  };\n\n  visit['while'] = function(node){\n    ++stats.statements;\n    visit(node[2]);\n  };\n\n  visit['if'] = function(node){\n    ++stats.statements;\n    visit(node[1]);\n    visit(node[2]);\n    visit(node[3]);\n  };\n\n  visit['defun'] = function(node){\n    ++stats.functions;\n    ++stats.statements;\n    visit(node[3]);\n  };\n\n  visit['function'] = function(node){\n    ++stats.functions;\n    visit(node[3]);\n  };\n\n  visit['call'] = function(node){\n    visit(node[1]);\n    visit(node[2]);\n  };\n\n  visit['assign'] = function(node){\n    ++stats.assignments;\n    visit(node[3]);\n  };\n\n  visit['stat'] = function(node){\n    ++stats.statements;\n    visit(node[1]);\n  };\n\n  try {\n    visit(parse(str));\n  } catch (err) {\n    if ('JS_Parse_Error' != err.constructor.name) throw err;\n    var line = str.split('\\n')[err.line];\n    err = new SyntaxError(err.message\n        + ' on line '\n        + err.line\n        + ':' + err.col\n        + ':\\n    ' + sys.inspect(line));\n    if (!options.ignoreParseErrors) throw err;  \n  }\n\n  return stats;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}